#!/usr/bin/env python
#HEADER#######################
# Katana framework           #
# ktf.linker File            #
# Last Modified: 31/03/2016  #
# Review: 0                  #
#######################HEADER#

from scripts.web import whois
from core.design import *
from core import info
import argparse
CLASS_LINKER=DESIGN()

if __name__=="__main__":
	CLASS_LINKER.linker(info.version, info.build)
	parser = argparse.ArgumentParser(description='ktf.linker:'+info.version+info.build)
	parser.add_argument("-m", "--module", help="Module")
	parser.add_argument("-t", "--target", help="Target")        
	parser.add_argument("-p", "--port", help="Port")            
	parser.add_argument("-f", "--file", help="File")            
	parser.add_argument("-u", "--user", help="Username")
	parser.add_argument("-ps","--password", help="Password")
	parser.add_argument("-x", "--userb", help="Usernameb")
	parser.add_argument("-z", "--passwordb", help="Passwordb")
	parser.add_argument("-d", "--dictionary", help="Dictionary")
	parser.add_argument("-c", "--condition", help="Condition")
	parser.add_argument("-i", "--interface", help="interface")
	parser.add_argument("-v", "--valueform", help="Form Input")
	parser.add_argument("-o", "--output", help="output")
	parser.add_argument("-g", "--gateway", help="Gateway")
	parser.add_argument("-l", "--length", help="Length")
	parser.add_argument("-q", "--query", help="Query")
	args = parser.parse_args()	
	if args.module == "web/whois":      whois.run(target=args.target, port=args.port)
	elif args.module == "web/joomscan": Joomscan.run(target=args.target, port=args.port)
	elif args.module == "web/cpfinder": AdminFinder.run(target=args.target, port=args.port, dictionary=args.file)
	elif args.module == "web/formbt":   BruteForceFormBase.run(target=args.target, port=args.port, patch=args.file, para1=args.userb, valor=args.valueform, para2=args.passwordb, dictionary=args.dictionary, method=args.query, condition=args.condition)
	elif args.module == "web/httpbt":   BruteForceHTTP.run(target=args.target, port=args.port, patch=args.file, username=args.user, dictionary=args.dictionary)
	elif args.module == "web/dos":      dosweb.run(target=args.target, port=args.port)
	elif args.module == "web/lfd-con":  LFDconsole.run(target=args.target, files=args.file, port=args.port)
	elif args.module == "net/lanlive":  LANScanner.run(nets=args.target, types="null")
	elif args.module == "net/portscan": PortScanner.run(target=args.target, types=args.port)
	elif args.module == "net/arpspoof": ARPPoisoning.run(target=args.target, source=args.gateway, interface=args.interface)
	elif args.module == "set/facebrok": facebrok.run(username=args.user,password=args.ports,database="facebrok_db",userp=args.userb,passp=args.passwordb)
	elif args.module == "set/gdreport": GetDataReport.run(target=args.target, js=args.query)
	elif args.module == "clt/ftp":      ClientFTP.run(target=args.target,port=args.port,username=args.user,password=args.ports)
	elif args.module == "clt/sql":      ClientMYSQL.run(target=args.target,port=args.port,username=args.user,password=args.ports)
	elif args.module == "clt/pop":      ClientPOP3.run(target=args.target,port=args.port,username=args.user,password=args.ports)
	elif args.module == "fbt/sql":      BruteForceSQL.run(target=args.target,port=args.port,username=args.user,dictionary=args.dictionary)
	elif args.module == "fbt/ssh":      BruteForceSSH.run(target=args.target,port=args.port,username=args.user,dictionary=args.dictionary)
	elif args.module == "fbt/ftp":      BruteForceFTP.run(target=args.target, port=args.port, username=args.user, dictionary=args.dictionary)
	elif args.module == "fbt/pop3":     BruteForcePOP3.run(target=args.target, port=args.port, username=args.user, dictionary=args.dictionary)
	elif args.module == "fle/bruterar": BruteRAR.run(files=args.file ,dictionary=args.dictionary)
	elif args.module == "fle/brutezip": BruteZIP.run(files=args.file ,dictionary=args.dictionary)
	elif args.module == "wifi/dos":     Wifi_DDOS.run(interface=args.interface, bssid=args.userb, channel=args.condition)
	elif args.module == "mc/gendic":    GenDic.run(dictionary=args.output, length=args.length, types=args.target)